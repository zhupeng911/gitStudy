<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

<!--1、坐标/基本配置-->
    <!-- 模型版本。必须是这样写，4.0.0现在是maven唯一支持的版本 -->
    <modelVersion>4.0.0</modelVersion>
    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如hyperchain.cn,maven会将该项目打成的jar包放本地路径:/hyperchain/cn -->
    <groupId>hyperchain.cn</groupId>
    <!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->
    <artifactId>demo</artifactId>
    <!-- maven打包的机制，如pom,jar,war，默认为jar 父工程一定是pom-->
    <packaging>pom</packaging>
    <!-- 本项目目前所处的版本号 -->
    <version>1.0-SNAPSHOT</version>

    <!-- properties定义一些常量，在pom中的其它地方可以直接引用 使用方式 如下 : ${file.encoding} -->
    <!-- 常常用来整体控制一些依赖的版本号 -->
    <properties>
        <file.encoding>UTF-8</file.encoding>
        <java.source.version>16</java.source.version>
        <java.target.version>16</java.target.version>
        <maven.compiler.source>16</maven.compiler.source>
        <maven.compiler.target>16</maven.compiler.target>
    </properties>

    <modules>
        <module>son1</module>
        <module>son2</module>
    </modules>


<!--2、依赖dependency：定义本项目的依赖关系，就是依赖的jar包 -->
    <dependencies>
        <!-- 每个dependency都对应这一个jar包 -->
        <dependency>
            <!--一般情况下，maven是通过groupId、artifactId、version这三个元素值 (俗称坐标)来检索该构件， 然后引入你的工程。-->
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
            <!-- 依赖范围
                compile：默认的scope，运行期有效，需要打入包中
                provided：编译期有效，运行期不需要提供，不会打入包中
                runtime：编译不需要，在运行期有效，需要导入包中。（接口与实现分离）
                test：测试需要，不会打入包中
                system：非本地仓库引入、存在系统的某个路径下的jar。（一般不使用）
             -->
            <scope>complie</scope>
            <!-- 设置依赖是否可选，默认为false,即子项目默认都继承。如果为true,则子项目必须显示的引入 -->
            <optional>false</optional>
            <!-- 依赖排除-->
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.20</version>
        </dependency>
    </dependencies>


<!--3、项目构建build（项目名finalName、资源resources、插件plugins） -->
    <build>
        <!-- a、<finalName>项目名称</finalName>  默认即可 -->
        <!-- b、资源：将java/resources目录下的文件当作资源文件来处理--->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.xml</include>
                </includes>
                <filtering>false</filtering>
            </resource>
        </resources>

        <!-- c、插件--->
        <plugins>
            <!--设置maven编译的jdk版本，maven3默认使用jdk5-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>16</source>     <!--源代码使用的jdk版本-->
                    <target>16</target>     <!--目标class编译版本呢-->
                    <encoding>utf-8</encoding>
                </configuration>
            </plugin>

            <plugin>    <!--jar插件--->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4.1</version>
                <executions>
                    <execution>
                        <id>make-assembly</id><!-- 绑定到package生命周期 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 只运行一次 -->
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>com.hyperchain.HelloMaven</mainClass> <!-- 你的主类名 -->
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
            </plugin>
                    
            <plugin>    <!--war插件-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <warName>test</warName>
                    <webResources>
                        <resource>
                            <directory>src/main/webapp/WEB-INF</directory>
                            <filtering>true</filtering>
                            <targetPath>WEB-INF</targetPath>
                            <includes>
                                <include>web.xml</include>
                            </includes>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

            <plugin>    <!--tomcat7插件：web项目-->
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <port>8088</port>
                    <uriEncoding>UTF-8</uriEncoding>
                    <path>/</path>
                    <finalName>Demo</finalName>
                </configuration>
            </plugin>
        </plugins>
    </build>

<!--4、仓库repositories：local_repo > settings_profile_repo > pom_profile_repo > pom_repositories > settings_mirror > central
-->
    <repositories>
        <repository>
            <id>alimaven</id>
            <name>aliyun maven</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

<!--5、多环境配置profiles-->
    <profiles>
        <profile>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <id>dev</id>
            <build>
                <finalName>dev</finalName>
            </build>
            <repositories>
                <repository>
                    <id>ali</id>
                    <name>ali repo</name>
                    <url>https://maven.aliyun.com/repository/central</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                    </snapshots>
                </repository>
            </repositories>
        </profile>

        <profile>
            <id>test</id>
            <build>
                <finalName>test</finalName>
            </build>
            <repositories>
                <repository>
                    <id>ali</id>
                    <name>ali repo</name>
                    <url>https://mirrors.huaweicloud.com/repository/maven/</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                    </snapshots>
                </repository>
            </repositories>
        </profile>

        <profile>
            <id>pro</id>
            <build>
                <finalName>pro</finalName>
            </build>
        </profile>
    </profiles>
</project>